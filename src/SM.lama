-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of
    BINOP (op) :  reminder -> case stack of
                                   right : left : stackReminder -> eval([binOp(op, left, right) : stackReminder, state, world], reminder)
                              esac
  | CONST (val) : reminder -> eval([val:stack, state, world], reminder)
  | READ        : reminder -> case readWorld(world) of
                                   [val, worldResult] -> eval([val:stack, state, worldResult], reminder)
                              esac
  | WRITE       : reminder -> case stack of
                                   val : stackReminder -> eval([stackReminder, state, writeWorld(val, world)], reminder)
                              esac
  | LD    (val) : reminder -> eval([state(val):stack, state, world], reminder)
  | ST    (val) : reminder -> case stack of
                                   x : stackReminder -> eval([stackReminder, state <- [val, x], world], reminder)
                              esac
  | _                      -> [stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  fun compile (expr) {
  case expr of
      Binop (op, left, right) -> {compileExpr(left), compileExpr(right), BINOP (op)}
    | Const (val)             -> singleton(CONST (val))
    | Var   (val)             -> singleton(LD (val))
    | _                       -> failure ("compileExpr not implemented\n")
    esac
  }
  deepFlatten(compile (expr))
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
			stackip -> {}
			| Read(x) -> {READ, ST(x)}
			| Write(val) -> {compileExpr(val), WRITE}
			| Assn(x, val) -> {compileExpr (val), ST(x)}
			| Seq(stmt1, stmt2) -> {compile(stmt1), compile(stmt2)}
		esac
	}
	deepFlatten (compile (stmt))
}
